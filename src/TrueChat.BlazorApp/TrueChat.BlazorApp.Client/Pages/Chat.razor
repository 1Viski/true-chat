@page "/chat"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@attribute [StreamRendering]
@inject IChatService ChatService
@implements IAsyncDisposable

<PageTitle>true:chat:room</PageTitle>

<h3>true:chat:room</h3>

<MudDivider Class="my-2"/>
<EditForm Model="FormMessage" OnSubmit="Send">
    <div class="d-flex">
        <MudTextField 
            Class="mx-1"
            @bind-Value="@FormMessage!.Nickname" 
            Label="Nickname" 
            Variant="Variant.Outlined"
            InputType="InputType.Text"/>
        <MudTextField 
            Class="mx-1"
            @bind-Value="@FormMessage!.Text" 
            Label="Message" 
            Variant="Variant.Outlined"
            InputType="InputType.Text"
            Adornment="Adornment.End"
            AdornmentIcon="@Icons.Material.Filled.Send"
            Disabled="!IsConnected"
            OnAdornmentClick="Send"/>
        <MudButton
            hidden="true"
            ButtonType="ButtonType.Submit">
        </MudButton>
    </div>
</EditForm>

@if (_messages is null || !IsConnected)
{
    <div>Loading...</div>
}
else
{
    @foreach (var message in _messages)
    {
        <ChatMessageCard Message="message"/>
    }
}

@code {
    private HubConnection? _hubConnection;
    private List<ChatMessage>? _messages;

    [SupplyParameterFromForm] 
    public FormMessage? FormMessage { get; set; }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        FormMessage ??= new FormMessage();
        _messages = (await ChatService.GetMessagesAsync()).ToList();
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7145/chat-hub")
            .Build();

        _hubConnection.On<ChatMessage>("ReceiveMessage", chatMessage =>
        {
            _messages!.Add(chatMessage);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    public async Task Send()
    {
        if (_hubConnection is not null)
        {
            var chatMessage = new ChatMessage(FormMessage!.Text, FormMessage.Nickname, DateTimeOffset.UtcNow);
            FormMessage.Text = string.Empty;
            await _hubConnection!.SendAsync("SendMessage", chatMessage);
            await ChatService.AddMessageAsync(chatMessage);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}