@page "/chat"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@attribute [StreamRendering]
@inject IChatService ChatService
@inject IAnalyticsService AnalyticsService
@using TrueChat.BlazorApp.Client.Enums
@implements IAsyncDisposable

<PageTitle>true:chat:room</PageTitle>

<MudStack 
    Row 
    AlignItems="AlignItems.Center" 
    Spacing="0">
    <h3>true:chat:room</h3>
    <MudChip
        T="string"
        Variant="Variant.Text"
        Color="Color.Success">
        @_positive
    </MudChip>
    <MudChip
        T="string"
        Variant="Variant.Text"
        Color="Color.Info">
        @_neutral
    </MudChip>
    <MudChip
        T="string"
        Variant="Variant.Text"
        Color="Color.Error">
        @_negative
    </MudChip>
</MudStack>

<MudDivider Class="my-2"/>

<div class="container">
    <MudPaper 
        Class="messages object-fit-fill"
        Elevation="0">
        @if (_messages is null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
        }
        else
        {
            @foreach (var message in _messages)
            {
                <ChatMessageCard Message="message"/>
            }
        }
    </MudPaper>

    <EditForm 
        Model="FormMessage" 
        OnSubmit="Send">
        <div class="d-flex">
            <DataAnnotationsValidator/>
            <MudTextField
                Class="mx-1"
                @bind-Value="@FormMessage!.Nickname"
                For="@(() => FormMessage!.Nickname)"
                Label="Nickname"
                Variant="Variant.Outlined"
                InputType="InputType.Text"/>
            <MudTextField
                Class="mx-1"
                @bind-Value="@FormMessage!.Text"
                Label="Message"
                Variant="Variant.Outlined"
                InputType="InputType.Text"
                Adornment="Adornment.End"
                AdornmentIcon="@Icons.Material.Filled.Send"
                Disabled="!IsConnected"
                OnAdornmentClick="Send"/>
            <MudButton
                hidden="true"
                ButtonType="ButtonType.Submit">
            </MudButton>
        </div>
    </EditForm>
</div>

@code {
    private string? _positive;
    private string? _neutral;
    private string? _negative;
    private HubConnection? _hubConnection;
    private List<ChatMessage>? _messages;

    [SupplyParameterFromForm] 
    public FormMessage? FormMessage { get; set; }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        _positive = DocumentSentiment.Positive.ToString();
        _neutral = DocumentSentiment.Neutral.ToString();
        _negative = DocumentSentiment.Negative.ToString();
        
        FormMessage ??= new FormMessage();

        try
        {
            _messages = (await ChatService.GetMessagesAsync()).ToList();
            _messages.Reverse();

            _hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7145/chat-hub")
                .Build();

            _hubConnection.On<ChatMessage>("ReceiveMessage", chatMessage =>
            {
                _messages!.Insert(0, chatMessage);
                StateHasChanged();
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            _messages = [];
            Console.WriteLine(e);
        }
    }

    public async Task Send()
    {
        if (_hubConnection is not null 
            && !string.IsNullOrEmpty(FormMessage!.Text) 
            && !string.IsNullOrWhiteSpace(FormMessage.Text))
        {
            var sentiment = await AnalyticsService.GetSentiment(FormMessage!.Text!);
            
            var chatMessage = new ChatMessage(
                FormMessage!.Text, 
                FormMessage.Nickname, 
                DateTimeOffset.UtcNow,
                sentiment);
            
            FormMessage.Text = string.Empty;
            await _hubConnection!.SendAsync("SendMessage", chatMessage);
            await ChatService.AddMessageAsync(chatMessage);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}